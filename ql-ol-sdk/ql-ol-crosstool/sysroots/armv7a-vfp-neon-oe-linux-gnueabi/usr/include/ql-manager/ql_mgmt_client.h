/**
 * @file ql_mgmt_client.h
 * @brief Quectel manager clinet API interface function declarations.
 *
 * @note
 *
 * @copyright Copyright (c) 2009-2017 @ Quectel Wireless Solutions Co., Ltd.
 */

#ifndef __QL_MGMT_CLIENT_H__
#define __QL_MGMT_CLIENT_H__

#include <stdbool.h>
#include <netinet/in.h>

#include "error_msgr.h"
#include "manager_msgr.h"

#ifdef FEATURE_QL_WIFI
#include "ql_mgmt_wifi.h"
#endif  /* end of FEATURE_QL_WIFI */

#ifdef FEATURE_QL_DATA_CALL
#include "ql_mgmt_data_call.h"
#endif /* end of FEATURE_QL_DATA_CALL */

#ifdef FEATURE_QL_NETWORK
#include "ql_mgmt_network.h"
#endif /* end of FEATURE_QL_NETWORK */

#define COMMAND_OFFSET_SIZE 16

#define QL_MGMT_CLIENT_COMMAND_WIFI        0x0001
#define QL_MGMT_CLIENT_COMMAND_ETH         0x0002
#define QL_MGMT_CLIENT_COMMAND_NETWORK     0x0003
#define QL_MGMT_CLIENT_COMMAND_FIREWALL    0x0004
#define QL_MGMT_CLIENT_COMMAND_PLATFORM    0x0005
#define QL_MGMT_CLIENT_COMMAND_DATA_CALL   0x0006

#define COMMAND_OFFSET(client, msg) (client) << COMMAND_OFFSET_SIZE | msg

typedef void* ql_mgmt_client_type;
typedef msg_error_type_e ql_mgmt_client_error_type_e;

typedef enum {
#ifdef FEATURE_QL_WIFI
	/* WiFI commands list */
	QL_COMMAND_WIFI_WORK_MODE = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_WORK_MODE),
	QL_COMMAND_WIFI_ENABLE = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_ENABLE),
	QL_COMMAND_WIFI_COUNTRY_CODE = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_COUNTRY_CODE),
	QL_COMMAND_WIFI_MODE = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_MODE),
	QL_COMMAND_WIFI_CHANNEL = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_CHANNEL),
	QL_COMMAND_WIFI_SSID = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_SSID),
	QL_COMMAND_WIFI_SSID_HIDE = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_SSID_HIDE),
	QL_COMMAND_WIFI_BANDWIDTH = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_BANDWIDTH),
	QL_COMMAND_WIFI_MAX_STA = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_MAX_STA),
	QL_COMMAND_WIFI_MAC_BLACKWHITE_LIST = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_MAC_BLACKWHITE_LIST),
	QL_COMMAND_WIFI_11N_ONLY = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_11N_ONLY),
	QL_COMMAND_WIFI_11AC_ONLY = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_11AC_ONLY),
	QL_COMMAND_WIFI_AP_ISOLATE = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_AP_ISOLATE),
	QL_COMMAND_WIFI_DFS = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_DFS),
	QL_COMMAND_WIFI_AUTH = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_AUTH),
	QL_COMMAND_WIFI_RSSI = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_RSSI),
	QL_COMMAND_WIFI_STA_INFO = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_STA_INFO),
#endif /* end of FEATURE_QL_WIFI */

#ifdef FEATURE_QL_DATA_CALL
	/* Data_Call commands list */
	QL_COMMAND_DATA_CALL_UP = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_DATA_CALL, QL_MGMT_CLIENT_COMMAND_DATA_CALL_UP),
	QL_COMMAND_DATA_CALL_DOWN = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_DATA_CALL, QL_MGMT_CLIENT_COMMAND_DATA_CALL_DOWN),
	QL_COMMAND_DATA_CALL_INFO = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_DATA_CALL, QL_MGMT_CLIENT_COMMAND_DATA_CALL_INFO),
	QL_COMMAND_DATA_CALL_APN = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_DATA_CALL, QL_MGMT_CLIENT_COMMAND_DATA_CALL_APN),
	QL_COMMAND_DATA_CALL_APN_PROFILE_LIST = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_DATA_CALL, QL_MGMT_CLIENT_COMMAND_DATA_CALL_APN_PROFILE_LIST),
	QL_COMMAND_DATA_CALL_DEL_APN = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_DATA_CALL, QL_MGMT_CLIENT_COMMAND_DATA_CALL_APN_DEL),
	QL_COMMAND_DATA_CALL_ADD_APN = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_DATA_CALL, QL_MGMT_CLIENT_COMMAND_DATA_CALL_APN_ADD),
	QL_COMMAND_DATA_CALL_DEFAULT_PROFILE = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_DATA_CALL, QL_MGMT_CLIENT_COMMAND_DATA_CALL_DEFAULT_PROFILE),

#endif /* end of FEATURE_QL_DATA_CALL */

#ifdef FEATURE_QL_NETWORK
	/* Network commands list */
	QL_COMMAND_NETWORK_DMZ_ADD = QL_MGMT_CLIENT_COMMAND_NETWORK << COMMAND_OFFSET_SIZE | QL_MGMT_CLIENT_COMMAND_NETWORK_DMZ_ADD,
	QL_COMMAND_NETWORK_DMZ_DEL = QL_MGMT_CLIENT_COMMAND_NETWORK << COMMAND_OFFSET_SIZE | QL_MGMT_CLIENT_COMMAND_NETWORK_DMZ_DEL,
	QL_COMMAND_NETWORK_DMZ_GET = QL_MGMT_CLIENT_COMMAND_NETWORK << COMMAND_OFFSET_SIZE | QL_MGMT_CLIENT_COMMAND_NETWORK_DMZ_GET,
	QL_COMMAND_NETWORK_SGMII_ENABLE = QL_MGMT_CLIENT_COMMAND_NETWORK << COMMAND_OFFSET_SIZE | QL_MGMT_CLIENT_COMMAND_NETWORK_SGMII_ENABLE,
	QL_COMMAND_NETWORK_SGMII_CONFIG = QL_MGMT_CLIENT_COMMAND_NETWORK << COMMAND_OFFSET_SIZE | QL_MGMT_CLIENT_COMMAND_NETWORK_SGMII_CONFIG,
	QL_COMMAND_NETWORK_SGMII_INFO = QL_MGMT_CLIENT_COMMAND_NETWORK << COMMAND_OFFSET_SIZE | QL_MGMT_CLIENT_COMMAND_NETWORK_SGMII_INFO,
	QL_COMMAND_NETWORK_LAN_CONFIG = QL_MGMT_CLIENT_COMMAND_NETWORK << COMMAND_OFFSET_SIZE | QL_MGMT_CLIENT_COMMAND_NETWORK_LAN_CONFIG,
#endif /* end of FEATURE_QL_NETWORK */

	QL_COMMAND_INVALID = 0xFFFFFFFF,
} ql_mgmt_client_command_e;

typedef enum {
#ifdef FEATURE_QL_DATA_CALL
	/* Data Call indication list */
	QL_COMMAND_IND_DATA_CALL_STATE = QL_MGMT_CLIENT_COMMAND_DATA_CALL << COMMAND_OFFSET_SIZE | QL_MGMT_CLIENT_IND_DATA_CALL_STATE,
#endif /* end of FEATURE_QL_DATA_CALL */

#ifdef FEATURE_QL_WIFI
	QL_COMMAND_IND_WIFI_ENABLE = COMMAND_OFFSET(QL_MGMT_CLIENT_COMMAND_WIFI, QL_MGMT_CLIENT_COMMAND_WIFI_ENABLE),
#endif /* end of FEATURE_QL_WIFI */
	QL_COMMAND_IND_INVALD = 0xFFFFFFFF,
} ql_mgmt_client_ind_e;

typedef void (*ql_manager_ind_cb)(ql_mgmt_client_ind_e ind_cmd, void *ind_data, int ind_size);

extern ql_mgmt_client_error_type_e ql_mgmt_client_set(ql_mgmt_client_type handle, ql_mgmt_client_command_e command, void *val, int size);
extern ql_mgmt_client_error_type_e ql_mgmt_client_get(ql_mgmt_client_type handle, ql_mgmt_client_command_e command, void *val, int size);
extern ql_mgmt_client_error_type_e ql_mgmt_client_open(ql_mgmt_client_type *handle, ql_manager_ind_cb ind_cb);
extern void ql_mgmt_client_close(ql_mgmt_client_type handle);

#endif /* end of __QL_MGMT_CLIENT_H__ */

